import pandas as pd
import numpy as np

# Sample data (embedded directly in the code)
data_dict = {
    'User': ['Alice', 'Alice', 'Alice', 'Alice', 'Alice',
             'Bob', 'Bob', 'Bob', 'Bob', 'Bob',
             'Charlie', 'Charlie', 'Charlie', 'Charlie', 'Charlie',
             'David', 'David', 'David', 'David', 'David',
             'Eve', 'Eve', 'Eve', 'Eve', 'Eve'],
    'Movie': ['Movie1', 'Movie2', 'Movie3', 'Movie4', 'Movie5', 
              'Movie1', 'Movie2', 'Movie3', 'Movie4', 'Movie5', 
              'Movie1', 'Movie2', 'Movie3', 'Movie4', 'Movie5', 
              'Movie1', 'Movie2', 'Movie3', 'Movie4', 'Movie5', 
              'Movie1', 'Movie2', 'Movie3', 'Movie4', 'Movie5'],
    'Rating': [5, 3, 4, 2, 1, 
               4, 2, 5, 3, 2, 
               3, 4, 2, 5, 1, 
               1, 5, 4, 2, 3, 
               2, 3, 4, 5, 1]
}

# Create a DataFrame from the dictionary
data = pd.DataFrame(data_dict)

# Display sample data
print("Sample data:")
print(data.head())

# Create user-movie matrix
um_matrix = data.pivot(index='User', columns='Movie', values='Rating').fillna(0)

# Function to compute cosine similarity between two vectors
def cosine_similarity(vec1, vec2):
    dot_product = np.dot(vec1, vec2)
    norm1 = np.linalg.norm(vec1)
    norm2 = np.linalg.norm(vec2)
    return dot_product / (norm1 * norm2) if norm1 != 0 and norm2 != 0 else 0

# Compute user similarity matrix manually
user_sim = np.zeros((um_matrix.shape[0], um_matrix.shape[0]))
for i, user1 in enumerate(um_matrix.index):
    for j, user2 in enumerate(um_matrix.index):
        if i != j:
            user_sim[i, j] = cosine_similarity(um_matrix.loc[user1].values, um_matrix.loc[user2].values)

user_sim_data = pd.DataFrame(user_sim, index=um_matrix.index, columns=um_matrix.index)

# Compute movie similarity matrix manually
movie_sim = np.zeros((um_matrix.shape[1], um_matrix.shape[1]))
for i, movie1 in enumerate(um_matrix.columns):
    for j, movie2 in enumerate(um_matrix.columns):
        if i != j:
            movie_sim[i, j] = cosine_similarity(um_matrix[movie1].values, um_matrix[movie2].values)

movie_sim_data = pd.DataFrame(movie_sim, index=um_matrix.columns, columns=um_matrix.columns)

# Create a dictionary for movie IDs to movie names (for illustration, assuming the 'Movie' column contains movie names)
movie_names = {movie: movie for movie in um_matrix.columns}

def recommend_movies(user, num_rec, method='user'):
    """
    Recommend movies to a user based on collaborative filtering.

    Args:
        user (str): Username of the target user.
        num_rec (int): Number of recommendations to generate.
        method (str): Recommendation method ('user' or 'item').

    Returns:
        list or str: List of recommended movies or error message.
    """
    if user not in um_matrix.index:
        return "User not found."
    
    recommendation = {}

    if method == 'user':
        # User-based collaborative filtering
        user_rating = um_matrix.loc[user]
        sim_users = user_sim_data[user].sort_values(ascending=False)[1:]
        for sim_user, sim_score in sim_users.items():
            sim_user_rating = um_matrix.loc[sim_user]
            for movie, rating in sim_user_rating.items():
                if user_rating[movie] == 0 and movie not in recommendation:
                    recommendation[movie] = sim_score * rating

    elif method == 'item':
        # Item-based collaborative filtering
        user_rating = um_matrix.loc[user]
        for movie, rating in user_rating.items():
            if rating > 0:
                similar_movies = movie_sim_data[movie].sort_values(ascending=False)[1:]
                for sim_movie, sim_score in similar_movies.items():
                    if user_rating[sim_movie] == 0 and sim_movie not in recommendation:
                        recommendation[sim_movie] = sim_score * rating
    else:
        return "Invalid recommendation method. Choose 'user' or 'item'."
    
    if not recommendation:
        return "No valid recommendations found based on your preferences."
    
    # Sort and return top recommendations
    recommend_movies = sorted(recommendation.items(), key=lambda x: x[1], reverse=True)[:num_rec]
    
    # Map movie IDs to movie names
    recommend_movies_with_names = [(movie_names[movie], score) for movie, score in recommend_movies]
    
    return recommend_movies_with_names

# Main program
print("\nWelcome to the Movie Recommendation System!")

# Loop to ensure valid username input
while True:
    uname = input("Enter your username: ").title()
    if uname not in um_matrix.index:
        print("Username not found. Please enter a valid username.")
    else:
        break

while True:
    try:
        num_rec = int(input("Enter the number of movies to recommend: "))
        if num_rec <= 0:
            print("Please enter a positive integer for the number of recommendations.")
        else:
            break
    except ValueError:
        print("Invalid input. Please enter a valid number.")

# Loop to ensure valid method input
while True:
    method = input("Choose recommendation method ('user' or 'item'): ").lower()
    if method not in ['user', 'item']:
        print("Invalid method. Please choose 'user' or 'item'.")
    else:
        break

# Get recommendations
recommendation = recommend_movies(uname, num_rec, method)

# Display recommendations or error message
print(f"\nRecommendations for {uname} using {method}-based filtering:")
if isinstance(recommendation, str):
    print(recommendation)
else:
    for movie, score in recommendation:
        print(f"{movie} (Predicted Score: {score:.2f})")
